# Production-ready Dockerfile for CustomerCareGPT Backend
# Multi-stage build for optimized production image

# =============================================================================
# Base Stage - Common dependencies and setup
# =============================================================================
FROM python:3.11-slim as base

# Set environment variables for Python optimization
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    PYTHONPATH=/app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user and directory
RUN groupadd -r app && useradd -r -g app app
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# =============================================================================
# Dependencies Stage - Install production dependencies
# =============================================================================
FROM base as dependencies

# Install production-specific dependencies
RUN pip install --no-cache-dir \
    gunicorn[uvicorn]==21.2.0 \
    psutil==5.9.6 \
    supervisor==4.2.5

# =============================================================================
# Production Stage - Final production image
# =============================================================================
FROM dependencies as production

# Copy application code
COPY --chown=app:app . .

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/chroma_data && \
    chown -R app:app /app/logs /app/uploads /app/chroma_data

# Create supervisor configuration
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create startup script
COPY docker/start.sh /start.sh
RUN chmod +x /start.sh

# Switch to non-root user
USER app

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["/start.sh"]

# =============================================================================
# Development Stage - For local development
# =============================================================================
FROM base as development

# Install development dependencies
RUN pip install --no-cache-dir \
    pytest==7.4.3 \
    pytest-asyncio==0.21.1 \
    pytest-cov==4.1.0 \
    pytest-xdist==3.3.1 \
    httpx==0.25.2 \
    black==23.9.1 \
    isort==5.12.0 \
    flake8==6.1.0 \
    mypy==1.6.1

# Copy application code
COPY --chown=app:app . .

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/chroma_data && \
    chown -R app:app /app/logs /app/uploads /app/chroma_data

# Switch to non-root user
USER app

# Expose port
EXPOSE 8000

# Development command
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# =============================================================================
# Testing Stage - For running tests
# =============================================================================
FROM base as testing

# Install testing dependencies
RUN pip install --no-cache-dir \
    pytest==7.4.3 \
    pytest-asyncio==0.21.1 \
    pytest-cov==4.1.0 \
    pytest-xdist==3.3.1 \
    httpx==0.25.2 \
    pytest-mock==3.12.0

# Copy application code
COPY --chown=app:app . .

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/chroma_data && \
    chown -R app:app /app/logs /app/uploads /app/chroma_data

# Switch to non-root user
USER app

# Test command
CMD ["pytest", "tests/", "-v", "--cov=app", "--cov-report=term-missing"]