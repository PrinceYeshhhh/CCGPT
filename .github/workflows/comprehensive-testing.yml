name: Comprehensive Testing Pipeline (Scheduled)

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '22'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Backend Testing
  backend-unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
    
    - name: Run unit tests
      working-directory: ./backend
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80 -n auto
    
    - name: Run LLM and RAG service tests
      working-directory: ./backend
      run: |
        pytest tests/unit/test_llm_services.py -v --cov=app --cov-report=xml
    
    - name: Run embed widget tests
      working-directory: ./backend
      run: |
        pytest tests/unit/test_embed_widget.py -v --cov=app --cov-report=xml
    
    - name: Run auth security tests
      working-directory: ./backend
      run: |
        pytest tests/unit/test_auth_security.py -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-unit
        name: backend-unit-coverage

  backend-integration-tests:
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
    
    - name: Run integration tests
      working-directory: ./backend
      run: |
        pytest tests/integration/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=75 -n auto
    
    - name: Run comprehensive backend tests
      working-directory: ./backend
      run: |
        echo "Running comprehensive backend tests..."
        
        # Run embed widget comprehensive tests
        echo "Testing Embed Widget functionality..."
        pytest tests/integration/test_embed_widget_comprehensive.py -v --cov=app --cov-report=xml --maxfail=5 || true
        
        # Run analytics comprehensive tests
        echo "Testing Analytics functionality..."
        pytest tests/integration/test_analytics_comprehensive.py -v --cov=app --cov-report=xml --maxfail=5 || true
        
        # Run real-time data comprehensive tests
        echo "Testing Real-time Data functionality..."
        pytest tests/integration/test_realtime_data_comprehensive.py -v --cov=app --cov-report=xml --maxfail=5 || true
        
        # Run backend logic comprehensive tests
        echo "Testing Backend Logic functionality..."
        pytest tests/integration/test_backend_logic_comprehensive.py -v --cov=app --cov-report=xml --maxfail=5 || true
        
        # Run integration edge cases tests
        echo "Testing Integration Edge Cases..."
        pytest tests/integration/test_integration_edge_cases.py -v --cov=app --cov-report=xml --maxfail=5 || true
        
        # Run critical production tests
        echo "Testing Critical Production scenarios..."
        pytest tests/integration/test_database_migrations.py -v --cov=app --cov-report=xml --maxfail=3 || true
        pytest tests/integration/test_multitenant_isolation.py -v --cov=app --cov-report=xml --maxfail=3 || true
        pytest tests/integration/test_websocket_reliability.py -v --cov=app --cov-report=xml --maxfail=3 || true
        pytest tests/integration/test_file_processing_limits.py -v --cov=app --cov-report=xml --maxfail=3 || true
        pytest tests/integration/test_production_rag_quality.py -v --cov=app --cov-report=xml --maxfail=3 || true
        pytest tests/integration/test_background_job_reliability.py -v --cov=app --cov-report=xml --maxfail=3 || true
    
    - name: Run BE/FE integration tests
      working-directory: ./backend
      run: |
        pytest tests/integration/test_be_fe_integration.py -v --cov=app --cov-report=xml --timeout=300
    
    - name: Upload integration coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-integration
        name: backend-integration-coverage

  backend-security-tests:
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run security tests
      working-directory: ./backend
      run: |
        pytest tests/security/ -v
        bandit -r app/ -f json -o security-report.json
        safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          ./backend/security-report.json
          ./backend/safety-report.json

  backend-performance-tests:
    runs-on: ubuntu-latest
    needs: backend-integration-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Run performance tests
      working-directory: ./backend
      run: |
        pytest tests/performance/ -v --maxfail=3
        # Run load tests with locust
        locust -f tests/performance/locustfile.py --headless -u 100 -r 10 -t 60s --html performance-report.html
    
    - name: Run stress tests
      working-directory: ./backend
      run: |
        pytest tests/performance/test_stress_testing.py -v --timeout=1800 -m "not slow"
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          ./backend/performance-report.html
          ./backend/locust-report.html

  # Frontend Testing
  frontend-unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run unit tests
      working-directory: ./frontend
      run: |
        npm run test:ci
        npm run test:coverage
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend-unit
        name: frontend-unit-coverage

  frontend-integration-tests:
    runs-on: ubuntu-latest
    needs: frontend-unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run integration tests
      working-directory: ./frontend
      run: |
        npm run test:integration
    
    - name: Run WebSocket integration tests
      working-directory: ./frontend
      run: |
        npm run test -- src/__tests__/integration/websocket.test.ts
    
    - name: Run cloud API tests
      working-directory: ./frontend
      run: |
        npm run test -- tests/test_cloud_api.ts
    
    - name: Upload integration coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend-integration
        name: frontend-integration-coverage

  # End-to-End Testing
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-integration-tests, frontend-integration-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm run preview -- --host 0.0.0.0 --port 3000 &
        sleep 10
    
    - name: Run E2E tests
      working-directory: ./backend
      run: |
        pytest tests/e2e/ -v --maxfail=5
    
    - name: Upload E2E reports
      uses: actions/upload-artifact@v3
      with:
        name: e2e-reports
        path: |
          ./backend/test-results/
          ./frontend/test-results/

  # Error Handling Tests
  error-handling-tests:
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run error handling tests
      working-directory: ./backend
      run: |
        pytest tests/integration/test_error_scenarios.py -v --maxfail=10
    
    - name: Upload error handling reports
      uses: actions/upload-artifact@v3
      with:
        name: error-handling-reports
        path: ./backend/test-results/

  # Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [
      backend-unit-tests,
      backend-integration-tests,
      backend-security-tests,
      backend-performance-tests,
      frontend-unit-tests,
      frontend-integration-tests,
      e2e-tests,
      error-handling-tests
    ]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Unit Tests | ${{ needs.backend-unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Integration Tests | ${{ needs.backend-integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Security Tests | ${{ needs.backend-security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Performance Tests | ${{ needs.backend-performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Unit Tests | ${{ needs.frontend-unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Integration Tests | ${{ needs.frontend-integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Error Handling Tests | ${{ needs.error-handling-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        
        # Check if any tests failed
        if [[ "${{ needs.backend-unit-tests.result }}" == "failure" || 
              "${{ needs.backend-integration-tests.result }}" == "failure" || 
              "${{ needs.backend-security-tests.result }}" == "failure" || 
              "${{ needs.backend-performance-tests.result }}" == "failure" || 
              "${{ needs.frontend-unit-tests.result }}" == "failure" || 
              "${{ needs.frontend-integration-tests.result }}" == "failure" || 
              "${{ needs.e2e-tests.result }}" == "failure" || 
              "${{ needs.error-handling-tests.result }}" == "failure" ]]; then
          echo "❌ Some tests failed. Please check the logs for details." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        fi
