# WebSocket and RealTime Unit Tests
# Focused workflow for WebSocket and realtime functionality testing

name: WebSocket & RealTime Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  websocket-realtime-tests:
    name: WebSocket & RealTime Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Validate requirements encoding
      working-directory: ./backend
      run: |
        python - <<'PY'
        import sys
        import pathlib
        def check(path: str) -> None:
            p = pathlib.Path(path)
            data = p.read_bytes()
            try:
                data.decode('utf-8')
            except UnicodeDecodeError as e:
                print(f"ERROR: {path} is not UTF-8: {e}")
                sys.exit(1)
        for f in ("requirements.txt", "requirements-dev.txt"):
            check(f)
        print("requirements encodings OK")
        PY

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        # Optional: install CPU-only torch wheels to avoid heavy CUDA downloads in CI
        pip install --extra-index-url https://download.pytorch.org/whl/cpu "torch<3,>=2" "torchvision<1,>=0.15" || true
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up test environment
      working-directory: ./backend
      run: |
        cp ../env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "ENVIRONMENT=testing" >> .env.test
        echo "SECRET_KEY=test-secret-key" >> .env.test
        echo "JWT_SECRET=test-jwt-secret" >> .env.test

    - name: Run WebSocket unit tests
      working-directory: ./backend
      run: |
        # Ensure CPU-only behavior and offline mode for ML libs to prevent stalls
        export HF_HUB_DISABLE_TELEMETRY=1
        export HF_HUB_OFFLINE=1
        export TRANSFORMERS_OFFLINE=1
        export SENTENCE_TRANSFORMERS_HOME="$PWD/.cache/sentencetransformers"
        export TORCH_HOME="$PWD/.cache/torch"
        export OMP_NUM_THREADS=1
        export MKL_NUM_THREADS=1
        export NUMEXPR_MAX_THREADS=1
        export TOKENIZERS_PARALLELISM=false
        export CUDA_VISIBLE_DEVICES=""
        export CHROMA_URL=""
        export USE_S3=false
        export USE_GCS=false
        PYTEST_DISABLE_PLUGIN_AUTOLOAD=1 pytest \
          tests/unit/test_websocket.py \
          tests/unit/test_websocket_router_unit.py \
          tests/unit/test_websocket_security_unit.py \
          tests/unit/test_realtime_service_unit.py \
          -vv -s \
          -p faulthandler -p pytest_cov -p asyncio \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=test-results-websocket.xml \
          --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
        SECRET_KEY: test-secret-key
        JWT_SECRET: test-jwt-secret
        GEMINI_API_KEY: test-gemini-key
        STRIPE_API_KEY: test-stripe-key
        TESTING: true
        PYTHONFAULTHANDLER: 1
        PYTHONUNBUFFERED: 1

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: websocket-realtime-test-results
        path: |
          backend/test-results-websocket.xml
          backend/coverage.xml

    - name: List lingering Python processes
      if: always()
      run: |
        echo "Checking lingering Python processes"
        ps aux | grep python || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: websocket-realtime
        name: websocket-realtime-coverage

    - name: Test Summary
      if: always()
      run: |
        echo "## WebSocket & RealTime Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Execution" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: PostgreSQL ${{ env.POSTGRES_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache**: Redis ${{ env.REDIS_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Files Executed" >> $GITHUB_STEP_SUMMARY
        echo "- test_websocket.py" >> $GITHUB_STEP_SUMMARY
        echo "- test_websocket_router_unit.py" >> $GITHUB_STEP_SUMMARY
        echo "- test_websocket_security_unit.py" >> $GITHUB_STEP_SUMMARY
        echo "- test_realtime_service_unit.py" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage XML**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **JUnit XML**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "✅ All WebSocket and RealTime tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Please check the logs for details." >> $GITHUB_STEP_SUMMARY
        fi

