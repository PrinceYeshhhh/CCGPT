# Backend Unit Tests
# Single workflow to run all backend unit tests

name: Backend Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up test environment
      working-directory: ./backend
      run: |
        cp ../env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "ENVIRONMENT=testing" >> .env.test
        echo "SECRET_KEY=test-secret-key" >> .env.test
        echo "JWT_SECRET=test-jwt-secret" >> .env.test

    - name: Run database migrations
      working-directory: ./backend
      run: |
        python smart_migrate.py || python simple_migrate.py || python migrate_with_retry.py
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        ENVIRONMENT: testing
        SECRET_KEY: test-secret-key
        JWT_SECRET: test-jwt-secret

    - name: Run all backend unit tests
      working-directory: ./backend
      run: |
        pytest tests/unit/ -v \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=test-results.xml \
          --maxfail=10 \
          --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
        SECRET_KEY: test-secret-key
        JWT_SECRET: test-jwt-secret
        GEMINI_API_KEY: test-gemini-key
        STRIPE_API_KEY: test-stripe-key
        TESTING: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-unit-test-results
        path: |
          backend/test-results.xml
          backend/coverage.xml
          backend/htmlcov/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-unit
        name: backend-unit-coverage

    - name: Test Summary
      if: always()
      run: |
        echo "## Backend Unit Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Execution" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: PostgreSQL ${{ env.POSTGRES_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache**: Redis ${{ env.REDIS_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage XML**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **HTML Report**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "✅ All backend unit tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Please check the logs for details." >> $GITHUB_STEP_SUMMARY
        fi
