name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  TESTING: "1"
  CI: "true"
  FORCE_COLOR: "1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-unit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps and tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 mypy junit-xml

      - name: Lint (flake8)
        run: |
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check (mypy)
        run: |
          mypy app/ --ignore-missing-imports

      - name: Discover unit tests
        run: |
          mkdir -p ../artifacts
          pytest tests/unit/ --collect-only -q | tee ../artifacts/backend-unit-tests.txt
      - name: Run unit tests
        env:
          PYTHONPATH: backend
          SKIP_PROBLEMATIC_TESTS: "true"
          SKIP_EXTERNAL_TESTS: "true"
          TESTING: "1"
          ENVIRONMENT: "test"
          ENABLE_RATE_LIMITING: "false"
          ENABLE_INPUT_VALIDATION: "false"
          REQUIRE_EMAIL_VERIFICATION: "false"
          DATABASE_URL: "sqlite:///./test.db"
        run: |
          mkdir -p ../artifacts
          pytest tests/unit/ \
            --junitxml=../artifacts/backend-unit-junit.xml \
            --cov=app --cov-report=xml:../artifacts/backend-unit-coverage.xml \
            --log-file=../artifacts/test-debug.log \
            --log-cli-level=INFO \
            -k "not slow and not integration" \
            --maxfail=0

      - name: Upload unit artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-unit-artifacts
          path: artifacts
          retention-days: 7

  backend-integration:
    runs-on: ubuntu-latest
    needs: backend-unit
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-asyncio httpx
      - name: Wait for services
        run: |
          python - <<'PY'
          import socket, time, sys
          def wait(host, port, name):
              for _ in range(120):
                  try:
                      with socket.create_connection((host, port), timeout=2):
                          print(name, "ready"); return
                  except OSError:
                      time.sleep(1)
              sys.exit(f"{name} not ready")
          wait("localhost", 5432, "postgres")
          wait("localhost", 6379, "redis")
          PY
      - name: Run integration tests
        env:
          PYTHONPATH: backend
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: ${{ secrets.SECRET_KEY || 'ci-secret' }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'ci-placeholder' }}
        run: |
          mkdir -p ../artifacts
          pytest tests/integration -q -n 2 \
            --junitxml=../artifacts/backend-integration-junit.xml \
            --cov=app --cov-report=xml:../artifacts/backend-integration-coverage.xml --cov-report=term-missing
      - name: Upload integration artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-integration-artifacts
          path: artifacts
          retention-days: 7

  frontend-unit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install
        run: npm ci
      - name: Clear npm cache
        run: npm cache clean --force
      - name: Lint
        run: npm run lint
      - name: Type check
        run: npm run type-check
      - name: Discover frontend tests
        run: |
          npx vitest --dry-run --reporter=verbose || true
      - name: Run frontend unit tests
        run: |
          npm run test:unit -- --coverage
      - name: Build
        run: npm run build
      - name: Upload frontend unit artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-unit-artifacts
          path: |
            dist
            coverage
          if-no-files-found: ignore
          retention-days: 7

  frontend-integration:
    runs-on: ubuntu-latest
    needs: frontend-unit
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install
        run: npm ci
      - name: Run frontend integration tests
        run: |
          npm run test:integration -- --coverage
      - name: Upload frontend integration artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-integration-artifacts
          path: |
            coverage
          if-no-files-found: ignore
          retention-days: 7

  e2e:
    runs-on: ubuntu-latest
    needs: [backend-integration, frontend-integration]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Compose up
        run: |
          docker compose -f docker-compose.yml up -d
          for i in {1..60}; do
            curl -fsS http://localhost:8000/health && break || sleep 2
          done
      - name: Run E2E (backend)
        working-directory: backend
        env:
          PYTHONPATH: backend
        run: |
          mkdir -p ../artifacts
          pytest tests/e2e -q --junitxml=../artifacts/e2e-junit.xml || true
      - name: Compose logs (on failure)
        if: failure()
        run: docker compose -f docker-compose.yml logs --no-color > compose-logs.txt
      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-artifacts
          path: |
            artifacts
            compose-logs.txt
          if-no-files-found: ignore
          retention-days: 7
      - name: Compose down
        if: always()
        run: docker compose -f docker-compose.yml down -v

  backend-performance:
    runs-on: ubuntu-latest
    needs: backend-unit
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run performance tests
        env:
          PYTHONPATH: backend
        run: |
          mkdir -p ../artifacts
          pytest tests/performance -q --junitxml=../artifacts/backend-performance-junit.xml || true
      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-performance-artifacts
          path: artifacts
          retention-days: 7

  backend-security:
    runs-on: ubuntu-latest
    needs: backend-unit
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run security tests
        env:
          PYTHONPATH: backend
        run: |
          mkdir -p ../artifacts
          pytest tests/security -q --junitxml=../artifacts/backend-security-junit.xml || true
      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-security-artifacts
          path: artifacts
          retention-days: 7

  backend-comprehensive:
    runs-on: ubuntu-latest
    needs: backend-unit
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run comprehensive suites
        env:
          PYTHONPATH: backend
        run: |
          mkdir -p ../artifacts
          pytest -q \
            tests/test_whitebox_comprehensive.py \
            tests/test_blackbox_comprehensive.py \
            tests/test_system_comprehensive.py \
            tests/test_integration_comprehensive.py \
            --junitxml=../artifacts/backend-comprehensive-junit.xml || true
      - name: Upload comprehensive artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-comprehensive-artifacts
          path: artifacts
          retention-days: 7

  backend-misc:
    runs-on: ubuntu-latest
    needs: backend-unit
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run remaining root tests
        env:
          PYTHONPATH: backend
        run: |
          mkdir -p ../artifacts
          pytest -q tests/test_*.py \
            --junitxml=../artifacts/backend-misc-junit.xml || true
      - name: Upload misc artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-misc-artifacts
          path: artifacts
          retention-days: 7

  backend-root:
    runs-on: ubuntu-latest
    needs: backend-unit
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run backend root-level tests
        env:
          PYTHONPATH: backend
        run: |
          mkdir -p ../artifacts
          pytest -q \
            test_chat_sessions_websocket.py \
            test_embeddable_widget.py \
            test_embeddings_pipeline.py \
            test_enhanced_rag_system.py \
            test_minimal.py \
            test_performance_integration.py \
            test_production_rag_system.py \
            test_rag_implementation.py \
            test_standalone.py \
            --junitxml=../artifacts/backend-root-junit.xml || true
      - name: Upload backend root artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-root-artifacts
          path: artifacts
          retention-days: 7

  frontend-e2e:
    runs-on: ubuntu-latest
    needs: [backend-integration, frontend-integration]
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install
        run: npm ci
      - name: Run Playwright E2E
        env:
          CI: true
        run: |
          npx playwright install --with-deps
          npm run test:e2e
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-playwright-report
          path: frontend/playwright-report
          if-no-files-found: ignore
          retention-days: 7

  repo-root-tests:
    runs-on: ubuntu-latest
    needs: [backend-unit]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install backend deps (for root tests)
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Run repository root tests
        env:
          PYTHONPATH: backend
        run: |
          mkdir -p artifacts
          pytest -q \
            test_local.py \
            test_local_setup.py \
            test_cloud_setup.py \
            test_production_readiness.py \
            test_production_readiness_comprehensive.py \
            --junitxml=artifacts/repo-root-junit.xml || true
      - name: Upload root test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: repo-root-test-artifacts
          path: artifacts
          retention-days: 7

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-unit, frontend-unit]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
          tags: |
            ${{ env.DOCKER_USERNAME }}/customercaregpt-backend:latest
            ${{ env.DOCKER_USERNAME }}/customercaregpt-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
          tags: |
            ${{ env.DOCKER_USERNAME }}/customercaregpt-frontend:latest
            ${{ env.DOCKER_USERNAME }}/customercaregpt-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  summarize:
    runs-on: ubuntu-latest
    needs: [backend-unit, backend-integration, frontend-unit, frontend-integration, e2e]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "- backend-unit: ${{ needs.backend-unit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- backend-integration: ${{ needs.backend-integration.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- frontend-unit: ${{ needs.frontend-unit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- frontend-integration: ${{ needs.frontend-integration.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- e2e: ${{ needs.e2e.result }}" >> $GITHUB_STEP_SUMMARY